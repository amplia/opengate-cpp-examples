#    Copyright (C) 2005 Ruben Moreno Montoliu <ruben3d@gmail.com>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#
# Makefile
#
# Generic Makefile for C++ projects.
#

# TODO: Install target.

###############################################
#                                             #
# IMPORTANT                                   #
#                                             #
# Do NOT edit this file. All the configurable #
# parameters are placed in Makefile.config.   #
#                                             #
###############################################

# User configuration
include Makefile.config

# Architecture configuration
include $(ARCH).arch

# Profile configuration
include $(PROFILE).profile

# Internal absolute paths
INT_BIN_PATH=$(PROJECT_PATH)/$(BIN_PATH)/$(ARCH_PREFIX)/$(PROFILE_PREFIX)
INT_BUILD_PATH=$(PROJECT_PATH)/$(BUILD_PATH)/$(ARCH_PREFIX)/$(PROFILE_PREFIX)
INT_SRC_PATH=$(PROJECT_PATH)/$(SRC_PATH)
INT_DOC_PATH=$(PROJECT_PATH)/$(DOC_PATH)
INT_DIST_PATH=$(PROJECT_PATH)/$(DIST_PATH)/$(ARCH_PREFIX)/$(PROFILE_PREFIX)
INT_DATA_PATH=$(PROJECT_PATH)/$(DATA_PATH)
INT_INSTALL_PATH=$(PROJECT_PATH)/$(INSTALL_PATH)/$(ARCH_PREFIX)/$(PROFILE)

#other parameters
TIMESTAMP = `date +%Y%m%d%H%M`

# Final argument lists
CCFLAGS+=$(PROFILE_CCFLAGS)
CXXFLAGS+=$(PROFILE_CXXFLAGS)
LDFLAGS+=$(PROFILE_LDFLAGS)
ARFLAGS+=$(PROFILE_ARFLAGS)
STRIPFLAGS+=$(PROFILE_STRIPFLAGS)

# Lists of source and object files and paths

SRC_DIRS=$(INT_SRC_PATH) $(addprefix $(INT_SRC_PATH)/, $(SRC_SUBDIRS))
BUILD_DIRS=$(INT_BUILD_PATH) $(addprefix $(INT_BUILD_PATH)/, $(SRC_SUBDIRS))
INCLUDE_DIRS=$(SRC_DIRS) $(addprefix $(INT_SRC_PATH)/, $(INC))

SRCS=$(filter-out $(addprefix $(INT_SRC_PATH)/,$(EXCLUDE)), $(foreach dir, $(SRC_DIRS), $(wildcard $(dir)/*.cpp) $(wildcard $(dir)/*.c)) )
OBJS=$(patsubst $(INT_SRC_PATH)/%.c, $(INT_BUILD_PATH)/%.o, $(patsubst $(INT_SRC_PATH)/%.cpp, $(INT_BUILD_PATH)/%.o, $(SRCS)) )
DEPS=$(patsubst %.o, %.d, $(OBJS))

LIBRARIES=$(LIBS)


# Primary targets (used with make <target>).

.PHONY: all target deps clean install dist distclean doc docclean bin additional additionalclean alldeps allclean start_message

# Builds the entire project (target and additional makefiles).
all: start_message $(INT_BIN_PATH)/$(TARGET)
	@echo Build completed.
	@echo
	$(additional_makes)

# Builds the main target.
target: $(INT_BIN_PATH)/$(TARGET);
	@echo Build completed.

# Build dependencies.
deps: $(SRCS) $(DEPS)
	@echo Dependencies generated successfully.

# Removes temporary objects, final binaries and dependency files.
clean:
	@rm -rf $(addsuffix /*.o, $(BUILD_DIRS))
	@rm -rf $(addsuffix /*.d, $(BUILD_DIRS))
	@rm -rf $(addsuffix /*~, $(BUILD_DIRS))
	@rm -rf $(INT_BIN_PATH)/$(TARGET)

install:
	@mkdir -p $(INT_INSTALL_PATH)
	rm -f $(INT_INSTALL_PATH)/$(TARGET)*.gz
	gzip -c $(INT_BIN_PATH)/$(TARGET) > $(INT_INSTALL_PATH)/$(TARGET)_$(PROFILE)_$(TIMESTAMP).gz
	cd $(INT_INSTALL_PATH); tar cv * --exclude CVS | gzip -c > $(INT_INSTALL_PATH)/../$(TARGET)_$(TIMESTAMP)_$(PROFILE).tar.gz

dist: $(INT_BIN_PATH)/$(TARGET)
	@mkdir -p $(INT_DIST_PATH)
	@rm -rf $(INT_DIST_PATH)/*
	-@cp -r $(INT_BIN_PATH)/* $(INT_DIST_PATH) 2> /dev/null
	-@cp -r $(INT_DATA_PATH)/* $(INT_DIST_PATH) 2> /dev/null
	@cd $(INT_DIST_PATH) && tar -cz -f $(DISTFILE).tar.gz *

distclean:
	@mkdir -p $(INT_DIST_PATH)
	@rm -rf $(INT_DIST_PATH)/*

# Generates Doxygen documentation.
doc:
	$(DOXYGEN) $(DOXYFILE)

# Removes the Doxygen documentation.
docclean:
	@rm -rf $(INT_DOC_PATH)/doxygen/*

# Executes the final binary file using de DATA_PATH as working path.
bin:
	@echo Executing \"$(TARGET)\"...
	cd $(INT_DATA_PATH) && /$(INT_BIN_PATH)/$(TARGET)
	@echo Execution terminated.

# Builds only additional makefiles.
additional:
	$(additional_makes)

# Cleans only additional makefiles.
additionalclean:
	@echo Cleaning additional Makefiles...
	@$(call makeall, clean)
	@echo Proccess finished.

alldeps: $(SRCS) $(DEPS)
	@echo Project files dependencies generated successfully.
	@echo Proccessing additional Makefiles...
	@$(call makeall, deps)
	@echo Proccess finished.

# Removes temporary objects, final binaries and dependency files from the project and related Makefiles.
allclean:
	@echo Cleaning project...
	@rm -rf $(addsuffix /*.o, $(BUILD_DIRS))
	@rm -rf $(addsuffix /*.d, $(BUILD_DIRS))
	@rm -rf $(addsuffix /*~, $(BUILD_DIRS))
	@rm -rf $(INT_BIN_PATH)/$(TARGET)
	@echo Cleaning additional Makefiles...
	@$(call makeall, clean)
	@echo Proccess finished.

# Internal targets. Do NOT use these.

#-include $(DEPS)

$(INT_BIN_PATH)/$(TARGET):$(OBJS)
	@echo
	@echo $@:$?
	@mkdir -p $(dir $@)
ifeq ($(GENERATE_STATIC_LIBRARY),yes)
	$(AR) $(ARFLAGS) $@ $(OBJS)
else
	$(LD) $(LDFLAGS) $(addprefix -l,$(LIBRARIES)) $(OBJS) $(STATICS) -o $@
endif
ifeq ($(STRIP_TARGET),yes)
	$(STRIP) $@
endif

# Makefile Makefile.config
$(INT_BUILD_PATH)/%.o: $(INT_SRC_PATH)/%.cpp
	@echo
	@echo $@:$?
	@mkdir -p $(dir $@)
	$(CXX) -c $(CXXFLAGS) $(addprefix -I,$(INCLUDE_DIRS)) $(filter %.cpp,$^) -o $@

$(INT_BUILD_PATH)/%.o: $(INT_SRC_PATH)/%.c
	@echo
	@echo $@:$?
	@mkdir -p $(dir $@)
	$(CC) -c $(CCFLAGS) $(addprefix -I,$(INCLUDE_DIRS)) $(filter %.c,$^) -o $@

$(INT_BUILD_PATH)/%.d: $(INT_SRC_PATH)/%.cpp
	@echo
	@echo $@:$?
	@mkdir -p $(dir $@)
	$(CXX) -MM -o $@ $(addprefix -I,$(INCLUDE_DIRS)) $(INT_SRC_PATH)/$*.cpp > /dev/null
#	$(CXX) -MM -MT $(patsubst %.d, %.o, $@) -MF $@ $(addprefix -I,$(INCLUDE_DIRS)) $(SRC_PATH)/$*.cpp > /dev/null

$(INT_BUILD_PATH)/%.d: $(INT_SRC_PATH)/%.c
	@echo
	@echo $@:$?
	@mkdir -p $(dir $@)
	$(CC) -MM -o $@ $(addprefix -I,$(INCLUDE_DIRS)) $(INT_SRC_PATH)/$*.c > /dev/null
#	$(CC) -MM -MT $(patsubst %.d, %.o, $@) -MF $@ $(addprefix -I,$(INCLUDE_DIRS)) $(SRC_PATH)/$*.c > /dev/null

define additional_makes
@echo Searching and executing additional Makefiles...
@$(call makeall, )
@echo Proccess finished.
endef

makeall=$(foreach dir, $(MAKEFILE_PATHS), \
		echo Entering into \'$(dir)\'...; \
		if [ -d $(dir) ]; then \
			cd $(dir); \
			if [ -f Makefile ]; then \
				make $(1); \
			else \
				echo Warning: Makefile not found in directory \'$(dir)\'.; \
			fi; \
			cd $(PROJECT_PATH); \
		else \
			echo Warning: Directory \'$(dir)\' not found.; \
		fi;)

start_message:
	@echo
	@echo Starting build process...
	@echo "  Architecture: $(ARCH)"
	@echo "  Profile: $(PROFILE)"
	@echo
	@echo Directories:
	@echo "  PROJECT: $(PROJECT_PATH)"
	@echo "  BIN: $(INT_BIN_PATH)"
	@echo "  BUILD: $(INT_BUILD_PATH)"
	@echo "  SRC: $(INT_SRC_PATH)"
	@echo "  DOC: $(INT_DOC_PATH)"
	@echo "  DIST: $(INT_DIST_PATH)"
	@echo "  DATA: $(INT_DATA_PATH)"
	@echo
	@echo Target:
	@echo "  $(TARGET)"
	@echo
	@echo Source files:
	@$(foreach file, $(SRCS), echo "  $(file)";)
	@echo
	@echo Object files:
	@$(foreach file, $(OBJS), echo "  $(file)";)
	@echo
	@echo
